#!/usr/bin/env ruby

require 'json'
require 'yaml'

require 'spiceweasel'

#process command line options
begin
  ARGV << "-h" if ARGV.empty?
  cli = Spiceweasel::CLI.new
  cli.parse_options
  DEBUG = cli.config[:debug]
rescue OptionParser::InvalidOption => e
  STDERR.puts e.message
  puts cli.opt_parser.to_s
  exit(-1)
end

begin
  file = ARGV.last
  STDOUT.puts "DEBUG: file: #{file}" if cli.config[:debug]
  if (file.end_with?(".yml"))
    input = YAML.load_file ARGV.last
  elsif (file.end_with?(".json"))
    input = JSON.parse(File.read(ARGV.last))
  else
    raise "Unknown file type, please use a file ending with either '.json' or '.yml'."
    exit(-1)
  end
rescue JSON::ParserError => e
  STDERR.puts e.message
  STDERR.puts "Parsing error in the infrastructure file provided."
  exit(-1)
rescue Exception
  STDERR.puts "No infrastructure .json or .yml file provided."
  puts cli.opt_parser.to_s
  exit(-1)
end

create = String.new()
delete = String.new()

cookbook_list = Spiceweasel::CookbookList.new(input['cookbooks'])
environment_list = Spiceweasel::EnvironmentList.new(input['environments'])

create += cookbook_list.create
create += environment_list.create

delete += cookbook_list.delete
delete += environment_list.delete

#roles
roles = input['roles'] || []
role_list = []
roles.each do |role|
  STDOUT.puts "DEBUG: role: #{role.keys[0]}" if cli.config[:debug]
  delete += "knife role delete #{role.keys[0]} -y\n"
  create += "knife role from file #{role.keys[0]}.rb\n"
  #flatten list of roles for validation later
  role_list.push(role.keys[0])
end

#data bags
bags = input['data bags'] || []
bags.each do |bag|
  STDOUT.puts "DEBUG: data bag: #{bag.keys[0]}" if cli.config[:debug]
  delete += "knife data bag delete #{bag.keys[0]} -y\n"
  create += "knife data bag create #{bag.keys[0]}\n"
  items = bag[bag.keys[0]] || []
  secret = nil
  while item = items.shift
    STDOUT.puts "DEBUG: data bag #{bag.keys[0]} item: #{item}" if cli.config[:debug]
    if item.start_with?("secret")
      secret = item.split()[1]
      next
    end
    if item =~ /\*/ #wildcard support
      files = Dir.glob("data_bags/#{bag.keys[0]}/#{item}.json")
      items += files.collect {|x| x[x.rindex('/')+1..-6]}
      puts items
      next
    end
    if secret
      create += "knife data bag from file #{bag.keys[0]} data_bags/#{bag.keys[0]}/#{item}.json --secret-file #{secret}\n"
    else
      create += "knife data bag from file #{bag.keys[0]} data_bags/#{bag.keys[0]}/#{item}.json\n"
    end
  end
end

nodes = input['nodes'] || []
#currently use bulk_delete for deleting, add provider support real soon
delete += "knife node bulk_delete .* -y\n"
nodes.each do |node|
  STDOUT.puts "DEBUG: node: #{node.keys[0]}" if cli.config[:debug]
  # delete += "knife node delete #{node[node.keys[0]}\n"
  run_list = node[node.keys[0]][0].gsub(/ /,',').split(',')
  STDOUT.puts "DEBUG: node run_list: #{run_list}" if cli.config[:debug]
  Spiceweasel::RunList.new(run_list).validate(cookbook_list, environment_list, role_list)
  #provider support
  if node.keys[0].start_with?("bluebox","ec2","openstack","rackspace","slicehost","terremark")
    provider = node.keys[0].split()
    count = 1
    if (provider.length == 2)
      count = provider[1]
    end
    #create the instances
    count.to_i.times do
      create += "knife #{provider[0]} server create #{node[node.keys[0]][1]}"
      if run_list.length > 0
        create += " -r '#{node[node.keys[0]][0].gsub(/ /,',')}'\n"
      end
    end
  else #multinode support
    node.keys[0].split.each do |server|
      create += "knife bootstrap #{server} #{node[node.keys[0]][1]}"
      if run_list.length > 0
        create += " -r '#{node[node.keys[0]][0].gsub(/ /,',')}'\n"
      end
    end
  end
end

#just print the knife commands, do not execute
#if cli.config[:dryrun]
if cli.config[:delete]
  puts delete unless delete.empty?
elsif cli.config[:rebuild]
  puts delete unless delete.empty?
  puts create unless create.empty?
else
  puts create unless create.empty?
end
#else
#eventually we will execute instead of printing knife commands
#puts "BAM!"
#end
